# Initfile
algorithm.solver.eps: 1e-14
algorithm.solver.verbose: 0
algorithm.solver.maxIterations: 10000
algorithm.solver.preconditioner.dropTol: 1e-4
algorithm.solver.preconditioner.fillFactor: 20

[problem]
# problem specifications
# note that the grid is specified in '../multiscale/problems/elliptic_problems/XX.hh'
name = Twelve

# characteristic size of the micro structure
epsilon = 0.05

# linear or nonlinear problem?
linear = 1
# NOTE:
# - classical MsFEM only available for linear problems
# - LOD only available for linear problems and nonlinear problems 
#   with a nonlinearity in the lower order term
# - HMM only available for linear problems and nonlinear problems 
#   with a nonlinearity in the leading order term
#   Nonlinear-HMM only works with a homogenous Dirichlet boundary condition!
# - FEM available for all linear and nonlinear problems 

# do you want a stochastic perturbation of the diffusion operator?
stochastic_pertubation = 0
#  (note that not every model problem allows stochastic perturbations)

# if stochastic perturbation is activated, what is the stochastic variance?
stochastic_variance = 0.01

# do we have a precomputed reference solution?
reference_solution = 0
# TODO: works only for HMM! MsFEM Variante noch nicht implementiert!

# file where the reference solution is stored
# (momentan ausgehend Pfad 'global.datadir')
rs_file = ../../../../dune/multiscale/problems/elliptic_problems/three/fem_eps_0.05_refLevel_16

# a saved/precomputed solution located at 'rs_file' is must be computed with the following refinement level:
#   (grid refinement level for which the reference was computed)
rs_grid_level = 16
#   (must have been determined with a uniformly refined grid)


[global]

# directory to save the data output
#datadir = data/lod_tests
datadir = data/fem
#datadir = data/LOD/Model_Problem_12/Coarse_8_Fine_16_Layers_32
#datadir = data/MsFEM/Model_Problem_9/Strategy_1/Coarse_4_Fine_12_Layers_16
#datadir = data/Rigorous_MsFEM_Clement/Model_Problem_9/Coarse_4_Fine_12_Layers_16
#datadir = data/Rigorous_MsFEM_Clement/Model_Problem_Daniel/Coarse_8_Fine_10_Layers_2
#datadir = data/Rigorous_MsFEM_Clement/Model_Problem_Daniel_class_MsFEM/Coarse_4_Fine_10_Layers_0

# VTK output for the solutions of the local problems
local_solution_vtk_output = 1
# (key currently only active for MsFEM!)

cgsolver_verbose = 1

[logging]
# logging specifications
# LOG_NONE = 1, LOG_ERR = 2, LOG_INFO = 4,LOG_DEBUG = 8,LOG_CONSOLE = 16,LOG_FILE = 32
# # --> LOG_ERR | LOG_INFO | LOG_DEBUG | LOG_FILE = 46
# # ANY odd number will disable ALL logging
#
level = 62
file = ms.log

# logging directory relative to datadir
# data will be saved under 'datadir/dir'
dir = logdata


# method specifications for MsFEM, LOD and HMM #

[msfem]

# initial coarse grid level
coarse_grid_level = 2

# initial fine grid level 
fine_grid_level = 4

# number of oversampling layers (layers of fine grid elements)
oversampling_layers = 32

# oversampling strategy 1 or 2.
oversampling_strategy = 1
# stratgey 1: local problems are solved in the full fine space
# strategy 2: local problems are solved in the full fine space
#             without the 3 basis functions belonging to the the 3 coarse nodes
# See 'rigorous MsFEM for oversampling strategy 3 (a + b).

# use the MsFEM in Petrov-Galerkin formulation (unsymmetric)
petrov_galerkin = 1

# compute the estimated error?
error_estimation = 0

# use error estimation and adaptive mesh refinement?
adaptivity = 0

# error tolerance  
error_tolerance = 1e-6

# compute the errors between MsFEM and (standard) FEM approximations?
fem_comparison = 1
#   (fem resolution = fine_grid_level of MsFEM)

#avail: cg.diagonal direct.superlu 
localsolver = direct.superlu

[rigorous_msfem]

# no error estimation implemented

# initial coarse grid level
coarse_grid_level = 4

# initial fine grid level 
fine_grid_level = 16

# number of oversampling layers (layers of fine grid elements)
oversampling_layers = 16

# oversampling strategy 3 'Lagrange' or 'Clement'.
oversampling_strategy = Clement
# strategy 3a / Lagrange: local problems are solved in the full fine space
#                        without the coarse grid nodes, i.e. coarse Lagrange interpolation is zero)
# strategy 3b / Clement : local problems are solved in the full fine space but weighted Clement 
#                        interpolation I_H : V_h -> V_H must be zero)

# use UZAWA solver for the local saddle point problems (not suggested!)
uzawa_solver = 0

# error tolerance for the iterative solver for the final macro problem 
macro_solver_tolerance = 1e-10

# max number of iterations for the solver for the final macro problem 
macro_solver_iterations = 10000

# compute the errors between MsFEM and (standard) FEM approximations?
fem_comparison = 1
#   (fem resolution = fine_grid_level of MsFEM)

#vtk output for MsFEM basis functions
msfem_basis_vtk_output = 1

localsolver = bicgstab.ilut

[lod]

# use the MsFEM in Petrov-Galerkin formulation (unsymmetric)
petrov_galerkin = 0

# algebraic solver ('cg' or 'bi_cg_stab')
algebraic_solver = cg

# algebraic solver for the local problems ('cg' or 'bi_cg_stab')
local_solver = cg

# show iterations of the local problem solver?
local_problem_solver_verbose = 0


[hmm]

# guess for epsilon (indicator for size of small scale)
epsilon_guess = 0.05

# oversampling parameter
delta = 0.1
#     NOTE that (delta/epsilon_guess) needs to be a positive integer!

# initial coarse level
coarse_grid_level = 2

# resolution level for the grid for the unit cube Y
cell_grid_level = 4
# 'effective fine grid level' = 'delta' * 'cell grid size'

# use the MsFEM in Petrov-Galerkin (unsymmetric) formulation
petrov_galerkin = 1

# use error estimation and adaptive mesh refinement?
adaptivity = 0

# error tolerance  
error_tolerance = 0.1

# compute the estimated error?
error_estimation = 0

# write final (discrete) HMM solution to a file?
write_to_file = 1

[fem]

# grid refinement level
grid_level = 18

# algebraic solver ('cg' or 'bi_cg_stab')
algebraic_solver = cg

